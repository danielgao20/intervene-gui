This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
agent.py
listener.py
main.py
requirements.txt
tasks.py
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="listener.py">
from pynput import mouse, keyboard

class OverrideDetector:
    def __init__(self):
        self.override = False

    def on_mouse_move(self, x, y):
        self.override = True

    def on_key_press(self, key):
        self.override = True

    def start_listeners(self):
        mouse_listener = mouse.Listener(on_move=self.on_mouse_move)
        keyboard_listener = keyboard.Listener(on_press=self.on_key_press)
        mouse_listener.start()
        keyboard_listener.start()
        return mouse_listener, keyboard_listener
</file>

<file path=".gitignore">
__pycache__/
*.pyc
</file>

<file path="requirements.txt">
MouseInfo==0.1.3
PyAutoGUI==0.9.54
PyGetWindow==0.0.9
PyMsgBox==1.0.9
pynput==1.8.1
pyobjc-core==11.0
pyobjc-framework-ApplicationServices==11.0
pyobjc-framework-Cocoa==11.0
pyobjc-framework-CoreText==11.0
pyobjc-framework-Quartz==11.0
pyperclip==1.9.0
PyRect==0.2.0
PyScreeze==1.0.1
pytweening==1.2.0
rubicon-objc==0.5.0
six==1.17.0
</file>

<file path="agent.py">
import time
from listener import OverrideDetector
from tasks import run_email_excel_workflow

class InterveneAgent:
    def __init__(self):
        self.detector = OverrideDetector()
        self.mouse_listener, self.keyboard_listener = self.detector.start_listeners()

    def run_task(self):
        print("🧠 Copilot standing by...")
        time.sleep(2)  # Wait before acting

        if not self.detector.override:
            print("🚀 No user detected, proceeding with email and Excel workflow...")
            run_email_excel_workflow()
        else:
            print("🛑 Manual override detected. Task cancelled.")

    def shutdown(self):
        self.mouse_listener.stop()
        self.keyboard_listener.stop()
</file>

<file path="main.py">
from agent import InterveneAgent

if __name__ == "__main__":
    # Create agent for input monitoring
    agent = InterveneAgent()
    
    try:
        # Process the todo while monitoring for overrides
        if not agent.detector.override:
            agent.run_task()
        else:
            print("🛑 Manual override detected. Task cancelled.")
    finally:
        agent.shutdown()
</file>

<file path="tasks.py">
import subprocess
import time
import pyautogui
from pynput import keyboard

def open_chrome_with_url(url: str):
    subprocess.run(["open", "-a", "Google Chrome", url])

def open_excel():
    subprocess.run(["open", "-a", "Microsoft Excel"])

def say_hello():
    print("👋 Hello from your local agent!")

def open_gmail():
    """Open Gmail in Chrome and wait for it to load"""
    subprocess.run(["open", "-a", "Google Chrome", "https://mail.google.com"])
    time.sleep(5)  # Wait for Gmail to load

def create_latest_email_reply_task(text: str = "") -> str:
    """Open Gmail, open the latest email, draft a reply, and save it as a draft"""
    print("📧 Starting latest email reply task")

    # Step 1: Open Gmail
    open_gmail()

    # Step 2: Wait for Gmail to fully load
    time.sleep(3)

    # Step 3: Open the latest email (assumes first email is at y=200)
    pyautogui.press("enter")
    print("📨 Opened latest email")

    # Step 4: Reply to the email
    pyautogui.press("r")
    time.sleep(1)
    print("↩️ Replying to email")

    # Step 5: Type the draft
    draft_text = """Hey Vishnu,\nthat sounds awesome, I've been diving into similar stuff recently and would love to jam. Let's grab lunch on Tuesday after our Algorithms class!

Looking forward,
Shubhayan"""
    pyautogui.write(draft_text, interval=0.05)
    print("📝 Draft typed")

    # Step 6: Save as draft
    pyautogui.hotkey("command", "s")
    print("💾 Draft saved")

    print("✅ Task complete")
    return "Email reply drafted and saved"

def open_excel_with_data(text: str = "") -> str:
    """Open Excel and prepare it for data entry with interaction summary"""
    subprocess.run(["open", "-a", "Microsoft Excel"])
    time.sleep(3)  # Wait for Excel to open
    
    # Create a new workbook
    pyautogui.hotkey('command', 'n')
    time.sleep(1)
    
    # Create headers
    headers = ["Metric", "Value"]
    for col, header in enumerate(headers):
        pyautogui.write(header)
        pyautogui.press('tab')
    pyautogui.press('enter')
    
    # Add data rows
    data = [
        ["Topic", "LLaMA + Agentic Workflows Discussion"],
        ["Meeting Type", "Lunch"],
        ["Time", "Tuesday after Algorithms class"],
        ["Status", "Draft saved in Gmail"],
        ["Response Time", "< 1 minute"]
    ]
    
    for row in data:
        for cell in row:
            pyautogui.write(cell)
            pyautogui.press('tab')
        pyautogui.press('enter')
    
    # Format cells (select all used range)
    pyautogui.hotkey('command', 'a')
    
    # Center align
    pyautogui.hotkey('command', 'e')
    
    return "Excel opened with interaction summary"

def run_email_excel_workflow():
    """Run the complete workflow: Open Gmail, navigate emails, then open Excel"""
    print("📧 Starting email and Excel workflow...")
    
    # Open Gmail
    create_latest_email_reply_task()
    print("WORKING")
    
    # Open Excel
    open_excel_with_data()
    print("✅ Excel opened and ready")
    
    print("🎉 Workflow completed!")
</file>

</files>
